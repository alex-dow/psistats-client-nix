#!/usr/bin/python
import pika
import config
import psutil
import socket
import simplejson as json
import time
import sys
import signal
import logging
from netifaces import interfaces, ifaddresses, AF_INET
from datetime import timedelta

__version__ = "0.0.1"


def getLogger(name):
    logger = logging.getLogger(name)
    logger.setLevel(config.LOG_LEVEL)

    formatter = logging.Formatter("[%(asctime)s] %(levelname)s: %(message)s",
                      "%Y-%m-%d %H:%M:%S")

    for handler in config.LOG_HANDLERS:
        handler.setLevel(config.LOG_LEVEL)
        handler.setFormatter(formatter)
        logger.addHandler(handler)
    return logger


def intro():
    pause = 0.06
    print " ##### ##### ##### ##### ##### ##### ##### #####"
    time.sleep(pause)
    print " #   # #       #   #       #   #   #   #   #" 
    time.sleep(pause)
    print " ##### #####   #   #####   #   #####   #   #####" 
    time.sleep(pause)
    print " #         #   #       #   #   #   #   #       #"
    time.sleep(pause)
    print " #     ##### ##### #####   #   #   #   #   #####"
    time.sleep(pause)
    print " ver: %s" % __version__


def get_connection(config):
    credentials = pika.PlainCredentials(config.SERVER_USERNAME, config.SERVER_PASSWORD)

    connection = pika.BlockingConnection(pika.ConnectionParameters(
        config.SERVER_HOST,
        config.SERVER_PORT,
        '/',
        credentials
    ))
    return connection


def setup_queue(channel):
    channel.exchange_declare(
        exchange=config.EXCHANGE_NAME,
        type=config.EXCHANGE_TYPE,
        durable=config.EXCHANGE_DURABLE,
        auto_delete=config.EXCHANGE_AUTODELETE
    )
    
    channel.queue_declare(
        queue=config.QUEUE_NAME,
        durable=config.QUEUE_DURABLE,
        exclusive=config.QUEUE_EXCLUSIVE,
        auto_delete=config.QUEUE_AUTODELETE,
        arguments=config.QUEUE_OPTIONS
    )
    
    channel.queue_bind(
        queue=config.QUEUE_NAME,
        exchange=config.EXCHANGE_NAME,
        routing_key=config.QUEUE_ROUTINGKEY
    )    

def ip4_addresses():
    ip_list = []
    for interface in interfaces():
        if interface not in ['virbr0']:
            addrs = ifaddresses(interface)
            if AF_INET in addrs:
                for link in addrs[AF_INET]:
                    if (link['addr'] != '127.0.0.1'):
                        ip_list.append(link['addr'])
    return ip_list

intro()
    
stats = {
    "cpu": 0.0,
    "mem_total": 0,
    "mem_used": 0,
    "mem_free": 0,
    "hostname": "",
    "uptime": "",
    "ipaddr": []
}

connection_errors = 0

logger = getLogger('psistats.root')

logger.info("All systems go, launch imminent")

RUNNING = True

def main_program():
    global RUNNING
    logger = getLogger('psistats.main')
    reset_queue = True
    connection = None
    channel = None
    queue_declare_timer = 0

    def sigterm_handler():
        global RUNNING
        logger.info("Shutting down...")
        if connection != None:
            connection.close()
        RUNNING = False

    
    signal.signal( signal.SIGTERM, sigterm_handler )
    
    while RUNNING:
        try:
            if (reset_queue == True):
                try:
                    if connection != None:
                        connection.close()
                except AttributeError:
                    pass
                
                try:
                    logger.info("Initializing RabbitMQ Connection")
                    connection = get_connection(config)
                    logger.debug("Opening channel...")
                    channel = connection.channel()
                    logger.debug("Oh boy we're close! Setting up the queue...")
                    setup_queue(channel)
                    logger.debug("We did it team! Reset successful, onwards with the stats!")
                    reset_queue = False
                except (pika.exceptions.AMQPConnectionError, socket.error) as e:
                    logger.error("Error connecting to the RabbitMQ Server %s" % e.message)
                    logger.info("Retrying connection in %d" % config.SERVER_RETRY_DELAY)
                    time.sleep(config.SERVER_RETRY_DELAY)
                    continue
                except pika.exceptions.ChannelClosed as e:
                    logger.error("Channel Closed: %s" % repr(e))
                    logger.info("Retrying connection in %d" % config.SERVER_RETRY_DELAY)
                    time.sleep(config.SERVER_RETRY_DELAY)
                    continue
            else:
                if (queue_declare_timer >= config.QUEUE_DECLARE_TIMER):
                    if channel != None:
                        logging.info("Redeclaring the queue")
                        setup_queue(channel)
                    else:
                        logging.warn("No channel object found while trying to redeclare queue")
    
                    queue_declare_timer = 0
                else:
                    queue_declare_timer = queue_declare_timer + 1                
                

            with open('/proc/uptime', 'r') as f:
                uptime_seconds = float(f.readline().split()[0])
                uptime_string = str(timedelta(seconds = uptime_seconds))
                stats['uptime'] = uptime_string
 
            
            stats["cpu"] = psutil.cpu_percent(interval=0)
        
            vm = psutil.virtual_memory()
            stats['mem_total'] = vm.total
            stats['mem_used'] = vm.used
            stats['mem_free'] = vm.free
            stats["hostname"] = socket.gethostname()
            stats["ipaddr"] = ip4_addresses()
        
            with open('/proc/uptime', 'r') as f:
                uptime_seconds = float(f.readline().split()[0])
                uptime_delta = timedelta(seconds = uptime_seconds)

                u_days = uptime_delta.days
                u_hours, rem = divmod(uptime_delta.seconds, 3600)
                u_mins, u_secs = divmod(rem, 60)

                uptime_string = "%dd:%dh:%dm:%ds" % (u_days, u_hours, u_mins, u_secs)
                stats['uptime'] = uptime_string
        
            stats_json = json.dumps(stats, indent=4, separators=(',', ': '))
        
            logger.debug(stats_json)
        
            try:
                channel.basic_publish(
                    exchange=config.EXCHANGE_NAME,
                    routing_key=config.QUEUE_ROUTINGKEY,
                    body=stats_json,
                    properties=pika.spec.BasicProperties(
                        content_type="application/json",
                        content_encoding="utf-8"
                    )
                )
                connection_errors = 0
            except AttributeError as e:
                if e.__str__() == "'BlockingConnection' object has no attribute 'disconnect'":
                    if (connection_errors > 5):
                        logger.error("Failed connecting 5 times, initiating reset protocols")
                        reset_queue = True
                        continue
                    else:
                        # bug in 0.9.13: http://stackoverflow.com/questions/811001/attribute-error-in-python
                        logger.error("Unknown connection error, retrying in 5 seconds")
                        connection_errors += 1
                        time.sleep(5)
            except:
                logger.exception()
        
            time.sleep(config.TIMER)
        except KeyboardInterrupt:
            logger.info("Closing connection...")
            try:
                connection.close()
            except AttributeError:
                pass
            logger.info("Exiting...")
            return 1
        except:
            logger.critical("Unhandled exception")
            logger.exception(sys.exc_info()[1])
            reset_queue = True
            time.sleep(10)

    logger.info("Shutting down...")
    if connection != None:
        connection.close()
    return 0
 


logger.info("Daemon ignition active")


logger.info("LAUNCH!")
for h in logger.handlers:
    h.close()
logger = None
retval = main_program()
sys.exit(retval)
